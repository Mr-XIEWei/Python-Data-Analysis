{"_id":"note:pGqSBBxUG","title":"常用工具","content":"# 数据可能存在的问题\n\n数据清洗实质上是将实际业务问题中，脏数据清洗干净,转换为’干净的数据’, 所谓的脏 ，指数据可能存在以下几种问题(主要问题):\n1. 数据缺失 (Incomplete) 是属性值为空的情况。如 Occupancy = “ ”\n2. 数据噪声 (Noisy)是数据值不合常理的情况。如 Salary = “-100”\n3. 数据不一致 (Inconsistent)是数据前后存在矛盾的情况。如 Age = “042” 或者 Birthday = “01/09/1985”\n4. 数据冗余 (Redundant)是数据量或者属性数目超出数据分析需要的情况\n5. 离群点/异常值 (Outliers)是偏离大部分值的数据\n6. 数据重复是在数据集中出现多次的数据\n\n# 数据清洗常用工具\n\n目前在Python中, numpy和pandas是最主流的工具，Numpy中的向量化运算使得数据处理变得高效，Pandas提供了大量数据清洗的高效方法。在Python中，尽可能多的使用numpy和pandas中的\n函数，提高数据清洗的效率\n\n## Numpy\n### Numpy常用数据结构\n- Numpy中常用的数据结构是ndarray格式\n- 使用array函数创建，语法格式为array(列表或元组)\n- 可以使用其他函数例如arange创建迭代器、linspace创建等差数组、zeros等创建\n\n```Python\nimport numpy as np\narr1 = np.array([-9,7,4,3],dtype = int)#array([-9,  7,  4,  3])\ntype(arr1)#<class 'numpy.ndarray'>\narr2 = np.array([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n#array([[ 1,  2,  3,  4],\n#       [ 5,  6,  7,  8],\n#      [ 9, 10, 11, 12]])\nnp.arange(0,10,1)#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\nnp.linspace(1,10,10,endpoint = True)#array([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.]) \nnp.zeros(4)#array([0., 0., 0., 0.])\nnp.ones([2, 3])\n#array([[1., 1., 1.],\n#      [1., 1., 1.]]\n```\n\n### Numpy常用方法\n\n- ndim(返回int,表示ndarray的维度)\n\n```Python\narr2.ndim#2\n```\n- shape(返回尺寸，几行几列)\n```Python\narr2.shape#(3, 4)\n```\n- size(返回数组元素的个数)\n\n```Python\narr2.size#12\n```\n- dtype(返回数组中元素的类型)\n\n```Python\narr2.dtype#dtype('int64')\n```\n- 运算(直接可以在每个元素加减乘除)\n\n```Python\narr1+1#array([-8,  8,  5,  4])\narr3 /2\n#array([[0.5, 1. , 1.5, 2. ],\n#      [2.5, 3. , 3.5, 4. ],\n#      [4.5, 5. , 5.5, 6. ]])\n```\n- 数组访问方法\n```Python\ndata2 = ((8.5,6,4.1,2,0.7),(1.5,3,5.4,7.3,9),(3.2,4.5,6,3,9),(11.2,13.4,15.6,17.8,19))\narr2 = np.array(data2)\narr2[2] #访问第三行，可以理解为行索引\narr2[2,1] #访问第三行，第二个元素,第一个是行索引，第二个是列索引\narr2[:,2:4] #访问第三和第四列\narr2[1:3] #2行和3行\narr2[1:,2:] #第2行到最后一行，第3列到最后一列\narr2[2][1] #访问第三行，第二个元素,第一个是行索引，第二个是列索引\n```\n\n### Numpy常用数据清洗函数\n- 排序函数\n\n\t- sort函数: 从小到大进行排序 \n\t- n argsort函数: 返回的是数据中,从小到大的索引值\n```Python\ns = np.array([1,2,3,4,3,1,2,2,4,6,7,2,4,8,4,5])\nnp.sort(s)#升序，不改变s\ns = np.sort(s)#升序，改变s\nnp.array(sorted(s,reverse =True))#降序\nnp.argsort(s)#返回数组排完序后，在原数组中的位置，位置从0开始\narr1 = np.array([[0,1,3],[4,2,9],[4,5,9],[1,-3,4]])\nnp.sort(arr1)#对每行排序\nnp.sort(arr1,axis = 0) # 0代表沿着行的方向， 1代表沿着列的方向，1与不加参数一致\nnp.sort(arr1,axis = 1)\n```\n- 数据的搜索\n\n\t- np.where: 可以自定义返回满足条件的情况 \n\t- np.extract: 返回满足条件的元素值\n```Python\nnp.where(s>3,s,-1)# 满足条件的，返回数组本身，不满足的赋值为-1，返回的数据长度和s一样\nnp.extract(s>3,s)# 只输出满足条件的数据\n```\n\n## Pandas\n\n### Pandas常用数据结构\n\n- series和方法\n\t- 通过pandas.Series来创建Series数据结构。\n\t- pandas.Series(data,index,dtype,name)。\n\t- 上述参数中，data可以为列表，array或者dict。\n\t- 上述参数中， index表示索引，必须与数据同长度，name代表对象的名称\n\n```Python\nimport pandas as pd\nimport numpy as np\n# 构造序列\nseries1 = pd.Series([2.8,3.01,8.99,8.59,5.18])\n#0    2.80\n#1    3.01\n#2    8.99\n#3    8.59\n#4    5.18\n#dtype: float64\nseries2 = pd.Series([2.8,3.01,8.99,8.59,5.18],index = ['a','b','c','d','e'],name ='这是一个series')\n#a    2.80\n#b    3.01\n#c    8.99\n#d    8.59\n#e    5.18\n#Name: 这是一个series, dtype: float64\nseries3 = pd.Series({'北京':2.8,'上海':3.01,'广东':8.99,'江苏':8.59,'浙江':5.18})\n#北京    2.80\n#上海    3.01\n#广东    8.99\n#江苏    8.59\n#浙江    5.18\n#dtype: float64\nseries3[0:3]\n#北京    2.80\n#上海    3.01\n#广东    8.99\n#dtype: float64\nseries3['北京']#2.8\nseries3['北京':'江苏']\n#北京    2.80\n#上海    3.01\n#广东    8.99\n#江苏    8.59\n#dtype: float64\n#series方法\nseries2.values#输出数组结构的值value\nseries3.index#输出行索引key\nseries1.dtypes\n```\n\n- dataframe和方法\n\t- 通过pandas.DataFrame来创建DataFrame数据结构。\n\t- pandas. DataFrame(data,index,dtype,columns)。\n\t- 上述参数中，data可以为列表，array或者dict。\n\t- 上述参数中， index表示行索引， columns代表列名或者列标签\n\n```Python\n# 构造数据框\n#数据框其实就是一个二维表结构，是数据分析中，最常用的数据结构\nlist1 = [['张三',23,'男'],['李四',27,'女'],['王二',26,'女']]#使用嵌套列表\ndf1 = pd.DataFrame(list1,columns=['姓名','年龄','性别'])\ndf1.head(5)#显示数据前5行\n#   姓名  年龄 性别\n#0  张三  23  男\n#1  李四  27  女\n#2  王二  26  女\ndf2 = pd.DataFrame({'姓名':['张三','李四','王二'],'年龄':[23,27,26],'性别':['男','女','女']}) #使用字典,字典的键被当成列名\narray1 = np.array([['张三',23,'男'],['李四',27,'女'],['王二', 26,'女']]) #使用numpy\ndf3 = pd.DataFrame(array1,columns=['姓名','年龄','性别'],index = ['a','b','c'] )\n#   姓名  年龄 性别\n#a  张三  23  男\n#b  李四  27  女\n#c  王二  26  女\n#dataframe方法\ndf2.values\ndf2.index\ndf2.columns#输出列标签\ndf2.columns.tolist()#转换成列表\ndf2.dtypes#每个列标签的数据类型\ndf2.ndim#输出数据维度\ndf2.shape#输出几行几列\ndf2.size#输出有多少元素\n```\n\n- 总结series和dataframe常用方法\n\t- values 返回对象所有元素的值\n\t- index 返回行索引\n\t- dtypes 返回索引\n\t- shape 返回对象数据形状\n\t- ndim 返回对象的维度\n\t- size 返回对象的个数\n\t- columns 返回列标签(只针对dataframe数据结构)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":[],"folderPathname":"/数据清洗","data":{},"createdAt":"2020-09-25T14:37:02.721Z","updatedAt":"2020-09-26T05:14:54.366Z","trashed":false,"_rev":"UeNDorWVM"}