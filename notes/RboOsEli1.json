{"_id":"note:RboOsEli1","title":"数据转换","content":"# 数据清洗之数据转换\n```Python\nimport pandas as pd\nimport numpy as np\nimport os\nos.chdir('/Users/waynexie/Documents/程序员/数据清洗课程材料/代码和数据')\n```\n\n## 日期格式数据处理\n- Pandas中使用to_datetime()方法将文本格式转换为日期格式\n```Python\ndf = pd.read_csv('baby_trade_history.csv', encoding='utf-8',dtype={'user_id':str})\ndf.head(10)\n# 对购买日期进行转换\ndf['buy_date'] = pd.to_datetime(df['day'],format='%Y%m%d',errors = 'coerce')#加errors防止报错\ndf.dtypes\n```\n- dataframe数据类型如果为datetime64,可以使用dt方法取出年月日等\n```Python\n# 可以提取对应年月日,必须为timestamp才可以，具体的时间点\ndf['buy_date'].dt.year\n```\n- 对于时间差数据,可以使用timedelta函数将其转换为指定时间单位的数值 \n- 时间差数据,可以使用dt方法访问其常用属性\n```Python\n# 对时间进行计算\ndf['diff_day'] =  pd.datetime.now() - df2['birthday']\ndf['diff_day'].head(5)\n# 时间差由天数，小时和毫秒构成\n# timedelta可以理解为时间差类型\ndf['diff_day'].dt.days# 提取天数\ndf['diff_day'].dt.seconds# 提取秒数(把时分秒全部转化为秒）\ndf['diff_day'].dt.microseconds# 提取毫秒数\n# 可以使用pd.Timedelta进行转换\ndf['时间差'] = df['diff_day']/pd.Timedelta('1 D') #转换为天数’1 H'小时\ndf['时间差'] = df['diff_day']/pd.Timedelta('1 M') #转换为分钟\ndf['时间差'].head(5)\ndf['时间差'].round(decimals=3)# 显示为3小数\ndf['diff_day'].astype('timedelta64[D]')# 这种方式也可以，M  代表月份数,D代表天数,Y代表年份，h小时，显示结果为整数\n```\n## 高阶函数处理\n- 在dataframe中使用apply方法，调用自定义函数对数据进行处理 \n- 函数apply, axis=0表示对行进行操作,axis=1表示对列进行操作\n- 可以使用astype函数对数据进行转换\n- 可以使用map函数进行数据转换\n```Python\ndf2 = pd.read_csv('sam_tianchi_mum_baby.csv',encoding = 'utf-8',dtype =str)#婴儿信息\n\ndef f(x):\n    if '0' in x:\n        return '女'\n    elif '1' in x :\n        return '男'\n    else:\n        return '未知'\n# 0代表女，1代表男，2代表未知\n\ndf2['性别'] = df2['gender'].apply(f)#新建一列\ndf2.head(4)\ndf2[df2['gender']=='2']\n#使用map函数\ndel df2['性别']\ndf2['性别'] = df2['gender'].map({'0':'女','1':'男','2':'未知'})\ndf2['性别'] = df2['gender'].map(f)#与上面相同\ndf2['user_id'].apply(lambda x: str(x).replace(x[1:3],'**')) #结合lambda替换\ndf2['birthday'].apply(lambda x: str(x)[0:4]) #提取年份\n```\n## 字符串数据处理\n- Pandas中提供了字符串的函数,但只能对字符型变量进行使用 \n- 通过str方法访问相关属性\n- 可以使用字符串的相关方法进行数据处理\n```Python\ndf1 = pd.read_csv('MotorcycleData.csv',encoding='gbk')#摩托车信息\ndf1.head(5)\ndf1['Price'].str[0:4]# 字符串切片\ndf1['Price'].astype(float)\n# 直接转换直接报错，需要进行字符串处理\ndf1['价格']  = df1['Price'].str.strip('$')#字符串相关方法#去除美元符号\ndf1['价格'] = df1['价格'].str.replace(',','')#把逗号转换为空字符串\ndf1['价格'] = df1['价格'].astype(float)#  转换为float数据\ndf1.Model.head(5)\ndf1['Location'].str.split(',') # 使用字符串分割,用于对文本的处理\ndf1['Location'].str.split(',').str[0]#提取分割后形成的列表中的第一个元素\ndf1['Mileage'].str.len() #计算字符串长度\n```\n![](2020-09-26---8-56-02-kfjogt4v.png)\n>**摩托车销售情况**：\n>- Condition：摩托车新旧情况（new：新的 和used：使用过的）\n- Condition_Desc：对当前状况的描述\n- Price：价格\n- Location：发获地址\n- Model_Year：购买年份\n- Mileage：里程\n- Exterior_Color：车的颜色\n- Make：制造商（牌子）\n- Warranty：保修\n- Model：类型\n- Sub_Model：车辆类型\n- Type：种类\n- Vehicle_Title：车辆主题\n- OBO：车辆仪表盘\n- Watch_Count：表数","tags":[],"folderPathname":"/数据清洗","data":{},"createdAt":"2020-09-26T12:02:00.311Z","updatedAt":"2020-09-26T12:59:04.228Z","trashed":false,"_rev":"tLV3j5Nie"}